# This is a basic Github Actions pipeline to validate Terraform

name: ' Validate Terraform code: '

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

defaults:
  run:
    working-directory: examples/databricks-department-clusters-pat

env:
  DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
  DATABRICKS_TOKEN:  ${{ secrets.DATABRICKS_TOKEN }}
  ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
  BACKEND_RG_NAME: ${{ secrets.BACKEND_RG_NAME }}
  BACKEND_SA_NAME: ${{ secrets.BACKEND_SA_NAME }}
  BACKEND_CONTAINER_NAME: ${{ secrets.BACKEND_CONTAINER_NAME }}
  BACKEND_KEY: ${{ secrets.BACKEND_KEY }}

jobs:
  build:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4

    steps:
      - uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
            terraform_version: '1.0.11'
      
      - name: Set up Databricks CLI profile for Terraform provider
        run: |
            echo "[DEFAULT]" >> ~/.databrickscfg
            echo "host = $DATABRICKS_HOST" >> ~/.databrickscfg
            echo "token = $DATABRICKS_TOKEN" >> ~/.databrickscfg
                    
      - name: Check formatting of Terraform code
        id: fmt
        run: |
          terraform fmt -check

      - name: Terraform Init
        id: init
        run: |
          terraform init \
          -backend-config="resource_group_name=$BACKEND_RG_NAME" \
          -backend-config="storage_account_name=$BACKEND_SA_NAME" \
          -backend-config="container_name=$BACKEND_CONTAINER_NAME" \
          -backend-config="key=$BACKEND_KEY"   

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
      
      - name: Update Pull Request
        uses: actions/github-script@v6.1.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
      
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

  release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    strategy:
      max-parallel: 4

    steps:
      - uses: actions/checkout@v3

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
            terraform_version: '1.0.11'
      
      - name: Set up Databricks CLI profile for Terraform provider
        run: |
            echo "[DEFAULT]" >> ~/.databrickscfg
            echo "host = $DATABRICKS_HOST" >> ~/.databrickscfg
            echo "token = $DATABRICKS_TOKEN" >> ~/.databrickscfg
                    
      - name: Check formatting of Terraform code
        id: fmt
        run: |
          terraform fmt -check

      - name: Terraform Init
        id: init
        run: |
          terraform init \
          -backend-config="resource_group_name=$BACKEND_RG_NAME" \
          -backend-config="storage_account_name=$BACKEND_SA_NAME" \
          -backend-config="container_name=$BACKEND_CONTAINER_NAME" \
          -backend-config="key=$BACKEND_KEY"       

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        run: terraform destroy -no-color -input=false --auto-approve
        continue-on-error: true

      - name: Terraform Apply Status
        if: steps.apply.outcome == 'failure'
        run: exit 1        